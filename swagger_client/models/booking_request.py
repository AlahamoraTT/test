# coding: utf-8

"""
    Houmwork

    Houmwork for OTUS TTA  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BookingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'table_id': 'int',
        'date_time': 'datetime',
        'phone': 'str'
    }

    attribute_map = {
        'table_id': 'tableId',
        'date_time': 'dateTime',
        'phone': 'phone'
    }

    def __init__(self, table_id=None, date_time=None, phone=None):  # noqa: E501
        """BookingRequest - a model defined in Swagger"""  # noqa: E501
        self._table_id = None
        self._date_time = None
        self._phone = None
        self.discriminator = None
        self.table_id = table_id
        self.date_time = date_time
        self.phone = phone

    @property
    def table_id(self):
        """Gets the table_id of this BookingRequest.  # noqa: E501

        Уникальный ID столика  # noqa: E501

        :return: The table_id of this BookingRequest.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this BookingRequest.

        Уникальный ID столика  # noqa: E501

        :param table_id: The table_id of this BookingRequest.  # noqa: E501
        :type: int
        """
        if table_id is None:
            raise ValueError("Invalid value for `table_id`, must not be `None`")  # noqa: E501

        self._table_id = table_id

    @property
    def date_time(self):
        """Gets the date_time of this BookingRequest.  # noqa: E501

        Дата и время бронирования  # noqa: E501

        :return: The date_time of this BookingRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this BookingRequest.

        Дата и время бронирования  # noqa: E501

        :param date_time: The date_time of this BookingRequest.  # noqa: E501
        :type: datetime
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def phone(self):
        """Gets the phone of this BookingRequest.  # noqa: E501

        Контактный телефон гостя  # noqa: E501

        :return: The phone of this BookingRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this BookingRequest.

        Контактный телефон гостя  # noqa: E501

        :param phone: The phone of this BookingRequest.  # noqa: E501
        :type: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BookingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BookingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
